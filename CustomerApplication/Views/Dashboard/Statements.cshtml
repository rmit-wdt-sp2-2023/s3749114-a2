@model StatementsViewModel
@{
    ViewData["Title"] = "Statements";
}

<h1>Statements</h1>
<form asp-action="Statements" asp-route-id="1">
    <div class="mb-3">
        @foreach (var account in Model.AccountsViewModel)
        {
            <input type="radio" asp-for="AccountNumber" value="@account.AccountNumber" id="@account.AccountNumber" class="btn-check" autocomplete="off" onchange="this.form.submit()">
            <label class="btn btn-outline-primary w-100 text-start" for="@account.AccountNumber">
                <span class="row">
                    <span class="col">
                        @account.AccountType<br>
                        @account.AccountNumber<br>
                    </span>
                    <span class="col">
                        @Html.DisplayNameFor(x => account.Balance)<br>
                        @Html.DisplayFor(x => account.Balance)
                    </span>
                    <span class="col">
                        @Html.DisplayNameFor(x => account.AvailableBalance)<br>
                        @Html.DisplayFor(x => account.AvailableBalance)
                    </span>
                </span>
            </label>
            <br>
        }
        <span asp-validation-for="AccountNumber" class="text-danger"></span>
    </div>
</form>
@if (Model.AccountNumber is not null)
{
    <h2>Transaction History</h2>
    @if (Model.Transactions.Count <= 0)
    {
        <span>No transacions found.</span>
    }
    else
    {
        <form asp-action="TransactionHistory">
            <table class="table">
                <thead>
                    <tr>
                        <th scope="col">@Html.DisplayNameFor(x => Model.Transactions[0].TransactionID)</th>
                        <th scope="col">@Html.DisplayNameFor(x => Model.Transactions[0].TransactionType)</th>
                        <th scope="col">@Html.DisplayNameFor(x => Model.Transactions[0].AccountNumber)</th>
                        <th scope="col">@Html.DisplayNameFor(x => Model.Transactions[0].DestinationNumber)</th>
                        <th scope="col">@Html.DisplayNameFor(x => Model.Transactions[0].Amount)</th>
                        <th scope="col">@Html.DisplayNameFor(x => Model.Transactions[0].TransactionTimeUtc)</th>
                        <th scope="col">@Html.DisplayNameFor(x => Model.Transactions[0].Comment)</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (Transaction transaction in Model.Transactions)
                    {
                        <tr>
                            <td>@transaction.TransactionID</td>
                            <td>@Html.DisplayFor(x => transaction.TransactionType)</td>
                            <td>@transaction.AccountNumber</td>
                            <td>@transaction.DestinationNumber</td>
                            <td>@Html.DisplayFor(x => transaction.Amount)</td>
                            <td>@transaction.LocalTimeString()</td>
                            <td>@transaction.Comment</td>
                        </tr>
                    }
                </tbody>
            </table>
            <span>Page @Model.PageNumber of @Model.TotalPages</span>
            @if (Model.PageNumber > Model.FirstPage)
            {
                int previousPage = Model.PageNumber - 1;
                <button type="submit" class="btn btn-primary" asp-route-id=@previousPage>Previous</button>
            }
            @if (Model.PageNumber < Model.TransactionPages)
            {
                int nextPage = Model.PageNumber + 1;
                <button type="submit" class="btn btn-primary" asp-route-id=@nextPage>Next</button>
            }
            <input type="hidden" asp-for="AccountNumber">
            <input type="hidden" asp-for="PageNumber">
        </form>
    }
}
<a asp-action="Index">Go back to Accounts</a>
